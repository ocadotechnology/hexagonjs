@function hx.loop
  @description
    Calls a function every frame until it returns true. This will attempt to use @code[requestAnimationFrame] , falling back to @code[setTimeout] if @code[requestAnimationFrame] is unavailable.

  @arg callback [Function]
    @description
      Return true to end the loop

    @returns [Boolean]

@function hx.transition
  @description
    Calls a function every frame for an amount of time, providing the progress to the callback. This will attempt to use @code[requestAnimationFrame] , falling back to @code[setTimeout] if @code[requestAnimationFrame] is unavailable.

  @arg millis [Number]
    @description
      The transition's duration in milliseconds

  @arg callback [Function]
    @description
      The function that gets called each frame

    @arg? cancelled [Boolean]
      @description
        If the transition has been cancelled and this is the final call, then cancelled will be true, otherwise it will be false.

    @arg progress [Number]

  @arg? ease [Function]
    @description
      The easing function to use. You can use one of the predefined functions on hx.ease, or you can define your own.

    @arg input [Number]
      @description
        A value between 0 and 1

    @default
      hx.ease.linear

    @returns [Number]
      @description
        A value between 0 and 1

  @arg? endCallback [Function]
    @arg cancelled [Boolean]
      @description
        Will be true if the transition was cancelled using the returned cancel function, otherwise will be true

  @returns [Function]
    @description
      A function that can be called to cancel the transition.

      @@codeblock
        var stop = hx.transition(1000, cb)

        // to stop/cancel the transition, the stop function can be called:
        stop()

@object hx.ease
  @description
    A collection of easing functions that map from domain [0, 1] to range [0, 1]

  @property linear [Function]
    @description
      The linear easing function is defined as

      @@codeblock
        function(x) {
          return x;
        }

    @arg input [Number]
      @description
        A value between 0 and 1

    @returns [Number]
      @description
        A value between 0 and 1

  @property quad [Function]
    @description
      The quadratic easing function is defined as

      @@codeblock
        function(x) {
          return x*x;
        }

    @arg input [Number]
      @description
        A value between 0 and 1

    @returns [Number]
      @description
        A value between 0 and 1

  @property cubic [Function]
    @description
      The cubic easing function is defined as

      @@codeblock
        function(x) {
          return x*x*x;
        }

    @arg input [Number]
      @description
        A value between 0 and 1

    @returns [Number]
      @description
        A value between 0 and 1

