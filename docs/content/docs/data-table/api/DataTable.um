@prototype hx.DataTable
  @extends EventEmitter
  @added 0.15.0
    @description
      Added a new module for creating data tables to replace the
    @code[Extended Table] module.

  @bugfix 0.15.2
    @description
      Fixed a bug where the sort controls were showing in compact mode when
      sorting had been disabled.

  @bugfix 0.15.3
    @description
      Fix an issue with data-tables not using custom renderers in mobile mode.

  @bugfix 1.0.0
    @description
      Updated the compact sort picker to use the @code[headerCellRenderer] for
      each column

  @bugfix 1.0.0
    @description
      Updated the styles to make the compact mode more compact

  @updated 1.1.0
    @issue 60
    @description
      Updated the cell styles for data tables so that changing the background
      color in the cellRenderer does not display with incorrect padding

  @bugfix 1.2.0
    @issue 85
    @issue 135
    @description
      Fixed the table row selection so that single row selection works properly

  @bugfix 1.2.0
    @issue 154
    @description
      Update hx.dataTable.urlFeed so that it uses the correct callback format
      from hx.json

  @updated 1.5.0
    @description
      Updated the compact view to have a collapsible control panel that houses
      the search, sort and advanced search controls so that compact tables take up less space

  @updated 1.5.0
    @issue 49
    @description
      Updated the data table to include options for Advanced searching
      (multi-column filtering) as well as showing the search above the table

  @bugfix 1.5.0
    @issue 252
    @description
      Resolved an issue where the classes for showing/hiding the sort
      were not being applied correctly

  @bugfix 1.8.0
    @issue 323
    @description
      Resolved an issue where nested tables would never hide their 'Loading'
      overlay

  @bugfix 1.10.0
    @issue 352
    @description
      Resolved an issue where setting the filter with the api would not update
      the filter input.

  @bugfix 1.15.0
    @description
      Resolved an issue where the input had 0 width in IE

  @description
    A component to allow tables to be created dynamically using Javascript that contains features such as filtering, sorting and pagination.

  @constructor
    @description
      Creates a table object using a selector and some options.
    @arg selector [String/HTMLElement/Selection]: A CSS selector string which uniquely identifies the element to create the table in, or the Element to create the table in.
    @arg? options [Object]: The options to use when creating the data table

      @property allowHeaderWrap [Boolean]: A boolean to determine whether table headers should be allowed to wrap onto multiple lines.
        @default: false

      @property cellRenderer [Function]: A function for rendering body cells.
        @default
          @@codeblock js
            function (element, cell, row) {
              hx.select(element).text(cell);
            }
        @arg element [HTMLElement]: The element that is being populated.
        @arg cell [Object]: The data for the cell.
        @arg row [Object]: The entire row object.

      @property collapsibleRenderer [Function]: A function for rendering collapsibles. For rows to be collapsible, this function must be provided.
        @arg element [HTMLElement]: The collapsible content that is being populated.
        @arg row [Object]: The entire row object

      @property columns [Object]
        @description
          An object that allows the setting of column specific renderers as well as the ability to disable sorting for a specific column.
          To set a one of the options for a column, an object can be defined:
          @@codeblock js
            {
              "columnid": {
                sortEnabled: true,
                cellRenderer: function (element, cell, row) {
                  hx.select(element).text(cell);
                }
              }
            }
          Columns will use the default options if a column specific value is not provided.
        @property allowHeaderWrap [Boolean]: Column specific version of the allowHeaderWrap option
        @property sortEnabled [Boolean]: Column specific version of the sortEnabled option
        @property cellRenderer [Function]: Column specific version of the cellRenderer option
          @arg element [HTMLElement]: The element that is being populated.
          @arg cell [Object]: The data for the cell.
          @arg row [Object]: The entire row object.
        @property headerCellRenderer [Function]: Column specific version of the headerCellRenderer option
          @arg element [HTMLElement]: The element that is being populated.
          @arg cell [Object]: The data for the cell.
          @arg headers [Object]: The entire headers object.

        @property maxWidth [Number]
          @added 1.1.0
            @description
              Added an option for setting the max width for a column
            @issue 11
          @description:
            A value that can be used to set the max width for a column to enable more structured table layouts.
            The max width does not take into account the padding applied to the cells and will stretch to fit the heading if there is not enough room for the heading text and icon
            At least one column must not have the max width set otherwise the table will ignore all values.

      @property compact [String/Boolean]
        @description
          A value to determine whether compact mode should be enabled.
          There are three possible values:
          @list
            @item: 'auto': Detect the size of the window and switch between compact and standard modes automatically.
            @item: true: Always use compact mode
            @item: false: Always use standard mode.
        @default: 'auto'

      @property displayMode [String]:
        @description
          A string to determine what display mode the table should use.

          There are currently two possible values:
          @list
            @item: 'paginate': show a single page at a time with a pagination option.
            @item: 'all': Show all the rows on a single page.
        @default: 'paginate'

      @property feed [Feed]
        @description
          The feed to use when creating the table. See the @code[Feed] and @code[hx.dataTable] objects for information on feeds.

      @property filter [String]: The filter to apply when creating the table

      @property filterEnabled [Boolean]: A boolean to determine whether filtering should be enabled.
        @default: true

      @property headerCellRenderer [Function]: A function for rendering header cells.
        @arg element [HTMLElement]: The element that is being populated.
        @arg cell [Object]: The data for the cell.
        @arg headers [Object]: The entire headers object.
        @default
          @@codeblock js
            function (element, cell, headers) {
              hx.select(element).text(cell.name);
            }

      @property noDataMessage [String]: A string that is displayed when there is no data in the table.
        @default: ['No Data']

      @property pageSize [Number]: A number to determine how many rows should be shown on a page.
        @default: 15

      @property pageSizeOptions [Array[Number]]
        @description
          An array of numbers to determine the page sizes that can be selected by the user.

          If a value is provided, a dropdown is shown to allow the user to change the rows displayed on a page.

      @property retainHorizontalScrollOnRender [Boolean]: A boolean to determine whether the horizontal scroll should be retained when re-rendering the current page of data.
        @default: true

      @property retainVerticalScrollOnRender [Boolean]: A boolean to determine whether the vertical scroll should be retained when re-rendering the current page of data.
        @default: false

      @property rowCollapsibleLookup [Function]: A function for determining whether a row has a collapsible.
        @default
          @@codeblock js
            function (row) {
              return false;
            }
        @arg row [Object]: The data for the current row.
        @returns Boolean: Whether the row should have a collapsible

      @property rowEnabledLookup [Function]: A function for determining whether a row should be visually disabled and prevented from being selected.
        @default
          @@codeblock js
            function (row) {
              return !row.disabled;
            }
        @arg row [Object]: The data for the current row.
        @returns Boolean: Whether the row should be disabled. True means that the row should be enabled, false means it should be disabled.

      @property rowIDLookup [Function]: Gets the unique id for a row.
        @default
          @@codeblock js
            function (row) {
              return row.id;
            }

          This could be changed to use one of the column values as the id (providing it is unique across all the data in the table)
        @arg row [Object]: The data for the current row.
        @returns String: The id of the row provided

      @property rowSelectableLookup [Function]: A function for determining whether a row can be selected at the time it is clicked.
        @default
          @@codeblock js
            function (row) {
              return true;
            }
        @arg row [Object]: The data for the current row.
        @returns Boolean: Whether the row can be selected.

      @property selectEnabled [Boolean]: A boolean to determine whether the selection of rows should be enabled.
        @default: false

      @property singleSelection [Boolean]
        @description
          A boolean to determine whether the table should be in single select mode.

          This mode only allows one row to be selected at a time.

          @code[selectEnabled] must also be true for this to take effect.
        @default: false

      @property sort [Object]: The sort to apply when creating the table. No sorting is applied by default
        @property column [String]: The column id to sort on
        @property direction [String]
          @description
            The sort direction. Can be either @code['asc'] or @code['desc']

      @property sortEnabled [Boolean]
        @description
          A boolean to determine whether sorting should be enabled. This can also be set on a per-column basis using the @code[columns] option.
        @default: true

      @property clearSelectionText [String]
        @added 1.4.0
          @issue 211
        @description
          The text to display on the 'clear selection' link when rows have been selected
        @default: [hx.userFacingText('dataTable','clearSelection')]

      @property loadingText [String]
        @added 1.4.0
          @issue 211
        @description
          The text to display when data is loading
        @default: [hx.userFacingText('dataTable','loading')]

      @property noDataMessage [String]
        @updated: The default text is now taken from the user facing text module.
          @issue 211
        @default: [hx.userFacingText('dataTable','noData')]

      @property noSortText [String]
        @added 1.4.0
          @issue 211
        @description
          The text to display on the mobile sort menu for 'No Sort'
        @default: [hx.userFacingText('dataTable', 'noSort')]

      @property rowsPerPageText [String]
        @added 1.4.0
          @issue 211
        @description
          The text to display next to the 'rows per page' picker
        @default: [hx.userFacingText('dataTable','rowsPerPage')]

      @property searchPlaceholder [String]
        @added 1.4.0
          @issue 211
        @description
          The placeholder for the 'search' box
        @default: [hx.userFacingText('dataTable','search')]

      @property selectedRowsText [String]
        @added 1.4.0
          @issue 211
        @description:
          The text to display in the selected rows information bar.

          The @code['$total'] variables can be substituted in, e.g for a table with 3 rows and 1 row selected:
          @@codeblock js
            options = {
              selectedRowsText: '$selected of $total selected.'
            }
            // Would evalate to '1 of 3 selected.'
        @default: [hx.userFacingText('dataTable', 'selectedRows')]

      @property sortByText [String]
        @added 1.4.0
          @issue 211
        @description
          The text to display next to the sort picker shown in compact mode.
        @default: [hx.userFacingText('dataTable','sortBy')]

      @property showAdvancedSearch [Boolean]
        @added 1.5.0
          @issue 49
        @description
          Whether to show the advanced search and the toggle for switching between the regular filter and the advanced search.

          If @code[advancedSearchEnabled] is true or an @code[advancedSearch] is passed in, this is set to true.

          See the @hyperlink(#using-the-advanced-search)[Using the Advanced Search] section at the bottom of the page for more information on the advanced search
        @default: false

      @property advancedSearchEnabled [Boolean]
        @added 1.5.0
          @issue 49
        @description
          Whether the advanced search should be enabled. If an @code[advancedSearch] is passed in, this is set to true.
          If @code[filterEnabled] is set to false and this is set to true, the advanced search will be shown on it's own with no toggle for switching the filter type.
          See the @hyperlink(#using-the-advanced-search)[Using the Advanced Search] section at the bottom of the page for more information on the advanced search
        @default: false

      @property advancedSearch [Array[Array[Object]]]
        @added 1.5.0
          @issue 49
        @description
          The advanced search array to use.
          If a value is passed in, @code[showAdvancedSearch] and @code[advancedSearchEnabled] are both set to true, showing and enabling the advanced search.
          See the @hyperlink(#using-the-advanced-search)[Using the Advanced Search] section at the bottom of the page for more information on the advanced search

      @property showSearchAboveTable [Boolean]: Whether to show the Search/Advanced search above the table
        @added 1.5.0
          @issue 49
        @default: false

      @property addFilterText [String]: The text to display on the add filter button
        @added 1.5.0
          @issue 49
        @default: @code[hx.userFacingText('dataTable', 'addFilter')]

      @property clearFiltersText [String]: The text to display on the clear filters button
        @added 1.5.0
          @issue 49
        @default: @code[hx.userFacingText('dataTable', 'clearFilters')]

      @property anyColumnText [String]: The text to display for the 'any column' option when creating advanced search filters
        @added 1.5.0
          @issue 49
        @default: @code[hx.userFacingText('dataTable', 'anyColumn')]

      @property advancedSearchText [String]: The text to display on the advanced search toggle
        @added 1.5.0
          @issue 49
        @default: @code[hx.userFacingText('dataTable', 'advancedSearch')]

      @property advancedSearchPlaceholder [String]: The text to display in the advanced search filter input boxes
        @added 1.5.0
          @issue 49
        @default: @code[hx.userFacingText('dataTable', 'search')]

      @property advancedSearchCriteria [Array[String]]
        @added 1.12.0
          @issue 401
          @description
            Added the ability to use filter types in the advanced search of data tables
        @description
          An array of types that the advanced search for the data table is allowed to use. The values that can be used can be found in @code[hx.filter.types()].

          Setting this to undefined disables the ability to change the filter criteria and uses 'contains' filtering.

          This value can be set per-column

        @default: undefined

      @property highlightOnHover [Boolean]
        @added 1.13.0
          @description
            Added the ability to disable row hover for data tables
        @description
          Whether the row should hightlight when the user hovers over it
        @default: true



  # Methods for changing the options
  # --------------------------------

  @group Options
    @description
      These methods are for getting/setting the value of the options available on data tables.
      For more information about what each option controls and the values they can be set to, see the options parameter of the DataTable constructor.

    @method collapsibleRenderer
      @description
        Gets the collapsibleRenderer option
      @returns Function: The collapsibleRenderer option

    @method collapsibleRenderer
      @description
        Sets the collapsibleRenderer option
      @arg value [Function]: The value for the collapsibleRenderer option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method compact
      @description
        Gets the compact option
      @returns Boolean: The compact option

    @method compact
      @description
        Sets the compact option
      @arg value [Boolean]: The value for the compact option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method displayMode
      @description
        Gets the displayMode option
      @returns String: The displayMode option

    @method displayMode
      @description
        Sets the displayMode option
      @arg value [String]: The value for the displayMode option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method feed
      @description
        Gets the feed option
      @returns Object: The feed option

    @method feed
      @description
        Sets the feed option
      @arg value [Object]: The value for the feed option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method filter
      @description
        Gets the filter option
      @returns String: The filter option

    @method filter
      @description
        Sets the filter option
      @arg value [String]: The value for the filter option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method filterEnabled
      @description
        Gets the filterEnabled option
      @returns Boolean: The filterEnabled option

    @method filterEnabled
      @description
        Sets the filterEnabled option
      @arg value [Boolean]: The value for the filterEnabled option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method noDataMessage
      @description
        Gets the noDataMessage option
      @returns String: The noDataMessage option

    @method noDataMessage
      @description
        Sets the noDataMessage option
      @arg value [String]: The value for the noDataMessage option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method pageSize
      @description
        Gets the pageSize option
      @returns Number: The pageSize option

    @method pageSize
      @description
        Sets the pageSize option
      @arg value [Number]: The value for the pageSize option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method pageSizeOptions
      @description
        Gets the pageSizeOptions option
      @returns [Array[Number]]: The pageSizeOptions option

    @method pageSizeOptions
      @description
        Sets the pageSizeOptions option
      @arg value [Array[Number]]: The value for the pageSizeOptions option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method retainHorizontalScrollOnRender
      @description
        Gets the retainHorizontalScrollOnRender option
      @returns Boolean: The retainHorizontalScrollOnRender option

    @method retainHorizontalScrollOnRender
      @description
        Sets the retainHorizontalScrollOnRender option
      @arg value [Boolean]: The value for the retainHorizontalScrollOnRender option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method retainVerticalScrollOnRender
      @description
        Gets the retainVerticalScrollOnRender option
      @returns Boolean: The retainVerticalScrollOnRender option

    @method retainVerticalScrollOnRender
      @description
        Sets the retainVerticalScrollOnRender option
      @arg value [Boolean]: The value for the retainVerticalScrollOnRender option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method rowCollapsibleLookup
      @description
        Gets the rowCollapsibleLookup option
      @returns Function: The rowCollapsibleLookup option

    @method rowCollapsibleLookup
      @description
        Sets the rowCollapsibleLookup option
      @arg value [Function]: The value for the rowCollapsibleLookup option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method rowEnabledLookup
      @description
        Gets the rowEnabledLookup option
      @returns Function: The rowEnabledLookup option

    @method rowEnabledLookup
      @description
        Sets the rowEnabledLookup option
      @arg value [Function]: The value for the rowEnabledLookup option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method rowIDLookup
      @description
        Gets the rowIDLookup option
      @returns Function: The rowIDLookup option

    @method rowIDLookup
      @description
        Sets the rowIDLookup option
      @arg value [Function]: The value for the rowIDLookup option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method rowSelectableLookup
      @description
        Gets the rowSelectableLookup option
      @returns Function: The rowSelectableLookup option

    @method rowSelectableLookup
      @description
        Sets the rowSelectableLookup option
      @arg value [Function]: The value for the rowSelectableLookup option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method selectEnabled
      @description
        Gets the selectEnabled option
      @returns Boolean: The selectEnabled option

    @method selectEnabled
      @description
        Sets the selectEnabled option
      @arg value [Boolean]: The value for the selectEnabled option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method singleSelection
      @description
        Gets the singleSelection option
      @returns Boolean: The singleSelection option

    @method singleSelection
      @description
        Sets the singleSelection option
      @arg value [Boolean]: The value for the singleSelection option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable


    @method sort
      @description
        Gets the sort option
      @returns Object: The sort option

    @method sort
      @description
        Sets the sort option
      @arg value [Object]: The value for the sort option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method allowHeaderWrap
      @description
        Gets the allowHeaderWrap option
      @returns Boolean: The allowHeaderWrap option

    @method allowHeaderWrap
      @description
        Sets the allowHeaderWrap option
      @arg value [Boolean]: The value for the allowHeaderWrap option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method allowHeaderWrap
      @description
        Gets the allowHeaderWrap value for a column of the table if one has been set.
      @arg column [String]: The id of the column to get the allowHeaderWrap value for
      @returns Boolean: The allowHeaderWrap option for the column

    @method allowHeaderWrap
      @description
        Sets the allowHeaderWrap value for a column of the table
      @arg column [String]: The id of the column to set the allowHeaderWrap value for
      @arg value [Boolean]: The value to set
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method cellRenderer
      @description
        Gets the cellRenderer option
      @returns Function: The cellRenderer option

    @method cellRenderer
      @description
        Sets the cellRenderer option
      @arg value [Function]: The value for the cellRenderer option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method cellRenderer
      @description
        Gets the cellRenderer value for a column of the table if one has been set.
      @arg column [String]: The id of the column to get the cellRenderer value for
      @returns Function: The cellRenderer option for the column

    @method cellRenderer
      @description
        Sets the cellRenderer value for a column of the table
      @arg column [String]: The id of the column to set the cellRenderer value for
      @arg value [Function]: The value to set
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method headerCellRenderer
      @description
        Gets the headerCellRenderer option
      @returns Function: The headerCellRenderer option

    @method headerCellRenderer
      @description
        Sets the headerCellRenderer option
      @arg value [Function]: The value for the headerCellRenderer option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method headerCellRenderer
      @description
        Gets the headerCellRenderer value for a column of the table if one has been set.
      @arg column [String]: The id of the column to get the headerCellRenderer value for
      @returns Function: The headerCellRenderer option for the column

    @method headerCellRenderer
      @description
        Sets the headerCellRenderer value for a column of the table
      @arg column [String]: The id of the column to set the headerCellRenderer value for
      @arg value [Function]: The value to set
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method sortEnabled
      @description
        Gets the sortEnabled option
      @returns Boolean: The sortEnabled option

    @method sortEnabled
      @description
        Sets the sortEnabled option
      @arg value [Boolean]: The value for the sortEnabled option
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method sortEnabled
      @description
        Gets the sortEnabled value for a column of the table if one has been set.
      @arg column [String]: The id of the column to get the sortEnabled value for
      @returns Boolean: The sortEnabled option for the column

    @method sortEnabled
      @description
        Sets the sortEnabled value for a column of the table
      @arg column [String]: The id of the column to set the sortEnabled value for
      @arg value [Boolean]: The value to set
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method maxWidth
      @added 1.1.0
        @issue 11
      @description
        Gets the maxWidth value for a column of the table if one has been set.
      @arg column [String]: The id of the column to get the maxWidth value for
      @returns Number: The maxWidth option for the column

    @method maxWidth
      @added 1.1.0
        @issue 11
      @description
        Sets the maxWidth value for a column of the table
      @arg column [String]: The id of the column to set the maxWidth value for
      @arg value [Number]: The value to set
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable

    @method showAdvancedSearch
      @added 1.5.0
        @issue 49
      @description
        Sets the showAdvancedSearch option
      @arg value [Boolean]: The value for the showAdvancedSearch option
      @returns DataTable: This data table

    @method showAdvancedSearch
      @added 1.5.0
        @issue 49
      @description
        Gets the showAdvancedSearch option
      @returns Boolean: The value of the showAdvancedSearch option


    @method advancedSearchEnabled
      @added 1.5.0
        @issue 49
      @description
        Sets the advancedSearchEnabled option
      @arg value [Boolean]: The value for the advancedSearchEnabled option
      @returns DataTable: This data table

    @method advancedSearchEnabled
      @added 1.5.0
        @issue 49
      @description
        Gets the advancedSearchEnabled option
      @returns Boolean: The value of the advancedSearchEnabled option


    @method showSearchAboveTable
      @added 1.5.0
        @issue 49
      @description
        Sets the showSearchAboveTable option
      @arg value [Boolean]: The value for the showSearchAboveTable option
      @returns DataTable: This data table

    @method showSearchAboveTable
      @added 1.5.0
        @issue 49
      @description
        Gets the showSearchAboveTable option
      @returns Boolean: The value of the showSearchAboveTable option


    @method advancedSearch
      @added 1.5.0
        @issue 49
      @description
        Gets the currently advanced search
      @returns [Array[Array[Object]]]: The currently set array of advanced search filter

    @method advancedSearch
      @added 1.5.0
        @issue 49
      @description
        Sets the advanced search
      @arg value [Array[Array[Object]]]: The advanced search array to set
      @returns DataTable: This data table

    @method advancedSearchCriteria
      @added 1.12.0
        @issue 401
        @description
          Added the ability to use filter types in the advanced search of data tables
      @description
        Gets the current advancedSearchCriteria
      @returns [Array[String]]: The currently set array of advancedSearchCriteria filter

    @method advancedSearchCriteria
      @added 1.12.0
        @issue 401
        @description
          Added the ability to use filter types in the advanced search of data tables
      @description
        Sets the advancedSearchCriteria
      @arg value [Array[String]]: The advancedSearchCriteria array to set
      @returns DataTable: This data table

    @method advancedSearchCriteria
      @added 1.12.0
        @issue 401
        @description
          Added the ability to use filter types in the advanced search of data tables
      @description
        Gets the advancedSearchCriteria value for a column of the table if one has been set.
      @arg column [String]: The id of the column to get the advancedSearchCriteria value for
      @returns [Array[String]]: The advancedSearchCriteria option for the column

    @method advancedSearchCriteria
      @added 1.12.0
        @issue 401
        @description
          Added the ability to use filter types in the advanced search of data tables
      @description
        Sets the advancedSearchCriteria value for a column of the table
      @arg column [String]: The id of the column to set the advancedSearchCriteria value for
      @arg value [Array[String]]: The value to set
      @arg? callback [Function]: The function to call once rendering is complete
      @returns DataTable: This DataTable




  # Methods for changing the state of the table
  # -------------------------------------------

  @method page
    @description
      Gets the current page
    @returns Number: The currently selected page

  @method page
    @description
      Sets the current page
    @arg value [Number]: The current page to set
    @arg? callback [Function]: The function to call once rendering is complete
    @returns DataTable: This DataTable


  @method selectedRows
    @description
      Gets the selected rows
    @returns [Array[String]]: The array of selected row ids

  @method selectedRows
    @description
      Sets the selected rows
    @arg value [Array[String]]: The array of row ids to set as selected
    @arg? callback [Function]: The function to call once rendering is complete
    @returns DataTable: This DataTable


  @method expandedRows
    @description
      Gets the expanded rows
    @returns [Array[String]]: The array of expanded row ids

  @method expandedRows
    @description
      Sets the expanded rows
    @arg value [Array[String]]: The array of row ids to set as expanded
    @arg? callback [Function]: The function to call once rendering is complete
    @returns DataTable: This DataTable


  @method rowsForIds
    @description
      Converts row ids to row objects using the table's data feed.
    @arg ids [Array[String]]: The array of row ids to get from the data
    @arg callback [Function]: The function to call once the rows have been retrieved
      @arg rows [Array[Object]]: The array of row objects returned from the feed



  # Methods that perform an action on the table
  # -------------------------------------------

  @method suppressRender
    @deprecated 0.15.2
      @description
        Use @code[renderSuppressed()] instead

    @removed 1.0.0
      @description
        Use @code[renderSuppressed()] instead

    @description
      Gets the suppressed state of the table.
    @returns Boolean: Whether the table is suppressed

  @method suppressRender
    @deprecated 0.15.2
      @description
        Use @code[renderSuppressed(value)] instead
    @removed 1.0.0
      @description
        Use @code[renderSuppressed(value)] instead

    @description
      A method for preventing the render from changing anything until unsuppressed.
    @arg suppress [Boolean]: Whether to suppress the render.
    @returns DataTable: This DataTable

  @method renderSuppressed
    @added 0.15.2
      @description
        Added a new method to replace @code[suppressRender] as the name did not make it clear that it was a setter/getter.
    @description
      Gets the suppressed state of the table.
    @returns Boolean: Whether the table render is suppressed

  @method renderSuppressed
    @added 0.15.2
      @description
        Added a new method to replace @code[suppressRender] as the name did not make it clear that it was a setter/getter.
    @description
      A method for preventing the render from changing anything until unsuppressed.
    @arg suppress [Boolean]: Whether to suppress the render
    @returns DataTable: This DataTable

  @method render
    @description
      Renders the table.
    @arg? callback [Function]: The function to call once rendering is complete
    @returns DataTable: This DataTable


  @event selectedrowschange [Object]
    @description
      Emitted when a row is selected or deselected.
    @property value [Array[String]]: The selected rows (a list of ids).
    @property? row [Object]: The row that was selected (if this event was caused by the user clicking on the row check)
    @property? rowValue [Boolean]: Whether or not the row that was clicked on is now selected (if this event was caused by the user clicking on the row check)
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event selectedrowsclear
    @description
      Emitted when the row selection is cleared by clicking on the 'clear selection' text.

  @event expandedrowschange [Object]
    @description
      Emitted when a row is expanded or collapsed
    @property value [Array[String]]: The expanded rows (a list of ids).
    @property? row [Object]: The row that was expanded or collapsed (if this event was caused by the user clicking on the expand toggle)
    @property? rowValue [Boolean]: Whether or not the row that was clicked on is now expanded  (if this event was caused by the user clicking on the expand toggle)
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event rowclick [Object]
    @bugfix 0.15.2
      @description
        Updated the row click event data to include the row data as well as the
        row node
    @description
      An object containing the row data and the row node.
    @property data [Object]: The data for the row
    @property node [HTMLElement]: The node for the row
      @added 0.15.2

  @event render
    @description
      Emitted when the table is rendered.

  @event pagechange [Object]
    @description
      Emitted when the page is changed
    @property value [Any]: The selected page number, starting from 1.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means a call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event collapsiblerendererchange [Object]
    @description
      Emitted when the collapsibleRenderer option is changed
    @property value [Any]: The value of the collapsibleRenderer option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event compactchange [Object]
    @description
      Emitted when the compact option is changed
    @property value [Any]: The value of the compact option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting
    @property? mode [Boolean]: If the cause is 'user', and the value is 'auto', this value will contain the actual compact mode (it will be true for compact, false for desktop)

  @event displaymodechange [Object]
    @description
      Emitted when the displayMode option is changed
    @property value [Any]: The value of the displayMode option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event feedchange [Object]
    @description
      Emitted when the feed option is changed
    @property value [Any]: The value of the feed option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event filterchange [Object]
    @description
      Emitted when the filter option is changed
    @property value [Any]: The value of the filter option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event filterenabledchange [Object]
    @description
      Emitted when the filterEnabled option is changed
    @property value [Any]: The value of the filterEnabled option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event nodatamessagechange [Object]
    @description
      Emitted when the noDataMessage option is changed
    @property value [Any]: The value of the noDataMessage option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event pagesizechange [Object]
    @description
      Emitted when the pageSize option is changed
    @property value [Any]: The value of the pageSize option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event pagesizeoptionschange [Object]
    @description
      Emitted when the pageSizeOptions option is changed
    @property value [Any]: The value of the pageSizeOptions option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event retainhorizontalscrollonrenderchange [Object]
    @description
      Emitted when the retainHorizontalScrollOnRender option is changed
    @property value [Any]: The value of the retainHorizontalScrollOnRender option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event retainverticalscrollonrenderchange [Object]
    @description
      Emitted when the retainVerticalScrollOnRender option is changed
    @property value [Any]: The value of the retainVerticalScrollOnRender option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event rowcollapsiblelookupchange [Object]
    @description
      Emitted when the rowCollapsibleLookup option is changed
    @property value [Any]: The value of the rowCollapsibleLookup option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event rowenabledlookupchange [Object]
    @description
      Emitted when the rowEnabledLookup option is changed
    @property value [Any]: The value of the rowEnabledLookup option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event rowidlookupchange [Object]
    @description
      Emitted when the rowIDLookup option is changed
    @property value [Any]: The value of the rowIDLookup option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event rowselectablelookupchange [Object]
    @description
      Emitted when the rowSelectableLookup option is changed
    @property value [Any]: The value of the rowSelectableLookup option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event selectenabledchange [Object]
    @description
      Emitted when the selectEnabled option is changed
    @property value [Any]: The value of the selectEnabled option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event singleselectionchange [Object]
    @description
      Emitted when the singleSelection option is changed
    @property value [Any]: The value of the singleSelection option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event sortchange [Object]
    @description
      Emitted when the sort option is changed
    @property value [Any]: The value of the sort option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event allowheaderwrapchange [Object]
    @description
      Emitted when the allowHeaderWrap option is changed
    @property value [Any]: The value of the allowHeaderWrap option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event cellrendererchange [Object]
    @description
      Emitted when the cellRenderer option is changed
    @property value [Any]: The value of the cellRenderer option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event headercellrendererchange [Object]
    @description
      Emitted when the headerCellRenderer option is changed
    @property value [Any]: The value of the headerCellRenderer option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

  @event sortenabledchange [Object]
    @description
      Emitted when the sortEnabled option is changed
    @property value [Any]: The value of the sortEnabled option.
    @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting


# Data / Feed related docs
# ------------------------

@object Feed
  @added 0.15.0
  @description
    A feed is the type of object used by a data table to get the data for display.
    A feed should be an object with the following functions:
    @@codeblock js
      {
        headers: function (cb) { ... }
        totalCount: function (cb) { ... }
        rows: function (range, cb) { ... }
        rowsForIds: function (ids, cb) { ... }
      }

    There are predefined feeds for objects and urls in the @code[hx.dataTable] object.
    A data table expects data to be returned in the callback of each function with a specific value.
    If a custom feed is created, it must return the values expected by the table.

  @property headers [Function]: A function to get a list of header objects
    @arg callback [Function]: The function to call once the data has been retrieved.
      @arg data [Array[Object]]
        @description
          The headers for a data set. The data is expected in the following format:
          @@codeblock js
            [
              {
                name: 'columnName', // The name for the heading to display in the table
                id: 'columnID' // The unique ID for the column
              },
              ... // Additional headers
            ]

  @property totalCount [Function]: A function to get the total number of rows in the data set.
    @arg callback [Function]: The function to call once the data has been retrieved.
      @arg data [Number]: The total number of rows. This can be undefined if you don't know the total number of rows in the data set.

  @property rows [Function]: A function to get the row data for the range object specified along with the filtered count
    @updated 1.5.0
      @description
        Updated the range parameter to include new advanced search properties
      @issue 49
    @arg range [Object]
      @description
        The range to get the rows for. An example object can be seen below:

        @@codeblock js
          {
            start: 0,
            end: 14,
            filter: "",
            sort: {
              column: 'name'
              direction: 'desc'
            },
            useAdvancedSearch: true, // Whether to filter using the advanced search
            advancedSearch: [
              [
                { column: 'any', term: '' }
              ]
            ]
          }

        The above example would be expected to return the first 15 rows of data, sorted by the 'name' column in descending order.


      @description
        The range to get the rows for. An example object can be seen below:
        @@codeblock js
          {
            start: 0,
            end: 14,
            filter: "",
            sort: {
              column: 'name'
              direction: 'desc'
            }
          }
        The above example would be expected to return the first 15 rows of data, sorted by the 'name' column in descending order.
      @property start [Number]: The start of the range. Might be undefined if the all displayMode is used.
      @property end [Number]: The end of the range. Might be undefined if the all displayMode is used.
      @property sort [Object]: The sort being used.
        @property column [String]: The column being sorted. Can be a column id or @code[undefined] indicating no sort.
        @property direction [String]: The sort direction. Can be "asc", "desc" or undefined.
      @property filter [String]: The filter being used.

    @arg callback [Function]: The function to call once the data has been retrieved.
      @arg data [Object]
        @property filteredCount [Number]
          @bugfix 1.7.0
            @description
              Fixed issue with page-size-selector for lazy feeds
            @issue 305
          @bugfix 1.7.0
            @description
              Fixed issue with page-selector for lazy feeds
            @issue 306
          @description
            @versioned
              @version 0.15.0
                The number of filtered rows
              @version 1.7.0
                The number of all filtered rows in the feed. Can be undefined if the feed is lazy and the final size is unknown.

        @property rows [Array[Object]]
          @description
            The rows for a range of the data set. The data is expected in the following format:
            @@codeblock js
              [
                {
                  id: 0, // The ID for a row
                  // hidden details can be specified here (not in the cells object)
                  cells: {
                    'columnID': 'value' // The cell values for a row in columnID/value pairs
                  }
                },
                ... // Additional rows
              ]



            A cell value must be provided for each column id for every row

  @property rowsForIds [Function]
    @description
      Gets the rows for an array of id's in the data.
      This is used when @code[DataTable::rowsForIds] is called.
    @arg ids [Array[String]]: The array of row id's to lookup.
    @arg lookupRow [Function]: The row id lookup function for the table
    @arg callback [Function]: The function to call once the data has been retrieved.
      @arg data [Array[Object]]: The array of row data retrieved from the id lookup

@object hx.dataTable
  @added 0.15.0
  @description
    An object containing the default Feed object constructors and helpers for making custom feeds.

    See the Using Feeds section for more information about using and creating Feeds.

  @property objectFeed [Function]
    @bugfix 1.10.0
      @description
        Resolved an issue where the object feed was using a cached set of filtered rows incorrectly when sorting multiple times on the same column
      @issue 360

    @description:
      The default feed object for using object based data

    @arg data [Object]
      @description
        The data to use in the feed.
        The data is expected in the following format:

        @@codeblock js
          {
            headers: [
              { name: 'Name', id: 'name' },
              ... // Additional Headers
            ],
            rows: [
              {
                // hidden details can go here (not in the cells object)
                id: 0,
                cells: {
                  'name': 'Bob',
                  ... // Additional cell data (each header should have linked cell data for each row)
                }
              },
              ... // Additional Rows
            ]
          }

    @arg? options [Object]: The options to use in the feed.
      @property filter [Function]
        @description
          Determines if the row should be included in the filtered data set.
          The default filter function just checks for inclusion of the search term in any of the cell's text.
        @arg term [String]: The search term
        @arg row [Object]: The row data
        @default
          @@codeblock js
            function (term, row) {
              var rowSearchTerm = Object.keys(row.cells).map(function (key) { return row.cells[key]}).join(' ').toLowerCase()
              term = term.toLowerCase.split(' ');
              for (var i in term) {
                var part = term[i];
                if (rowSearchTerm.indexOf(part) === -1) {
                  return false
                }
              }
              return false
            }

      @property compare [Function]
        @updated 1.5.0
          @description
            Updated the default sort function to use @code[hx.sort.compare] to provide better sorting
          @issue 49

        @description
          The compare function used to sort the rows.
        @arg cell1 [String]: The first cell value to compare
        @arg cell2 [String]: The second cell value to compare
        @default
          @versioned
            @version 0.15.0
              @@codeblock js
                function (cell1, cell2) {
                  return (cell1 > cell2 ? 1 : -1)
                }
            @version 1.5.0
              @code[hx.sort.compare]
        @returns Number: -1 if cell1 should be ordered before cell2, 0 if it is the same, +1 if it should be ordered after cell2

      @property cellValueLookup [Function]
        @added 1.5.0
          @description
            Added options to the object feed to make it more configurable
          @issue 49
        @description
          The function used to get a searchable string from a cell with it's value as an object
        @arg cell [Any]: The cell from the data being searched for a given column
        @returns String: A searcheable string
        @default: @code[hx.identity]

      @property termLookup [Function]: The function used to determine whether a row should be shown in the results
        @added 1.5.0
          @description
            Added options to the object feed to make it more configurable
          @issue 49
        @arg filterTerm [String]: The term entered in the filter
        @arg rowSearchTerm [String]: The term for the given row/column value
        @returns Boolean: A boolean to indicate whether the term has been found in the row
        @default
          @@codeblock js
            function(term, rowSearchTerm) {
              var whitespaceSplitRegex = /\s+/
              var stripLeadingAndTrailingWhitespaceRegex = /^\s+|\s+$/g
              var arr = term.replace(stripLeadingAndTrailingWhitespaceRegex, '').split(whitespaceSplitRegex)
              var validPart = hx.find(arr, function(part) {
                return ~rowSearchTerm.indexOf(part)
              })
              return hx.defined(validPart)
            }

    @returns Feed: A feed object. See the @code[Feed] object for more information on what a feed contains.


  @property urlFeed [Function]
    @description
      Creates a url fee using the provided url. The feed will then make requests to retrieve the various chunks of data as they are required.

    @arg url [String]: The url to use in the feed.
    @arg? options [Object]: The options to use in the feed.
      @property extra [Any]: Extra information to pass through to the requests made for data. This can be useful for identifying the table, or providing extra options when requesting data from the server.
      @property cache [Boolean]: Whether or not to cache values in memory - if you always want fresh data, this should be set to false.
        @default: false

    @returns Feed: A feed object. See the @code[Feed] object for more information on what a feed contains.

  @property getAdvancedSearchFilter [Function]
    @added 1.5.0
      @description
        Added a helper for creating custom feeds using the advanced search
      @issue 49
    @description
      Gets an advanced search filter when using a custom feed
    @arg cellValueLookup [Function]
      @description
        The function used to get a searchable string from a cell with it's value as an object
      @arg cell [Any]: The cell from the data being searched for a given column
      @returns String: A searcheable string
      @default: @code[hx.identity]

    @arg termLookup [Function]: The function used to determine whether a row should be shown in the results
      @arg filterTerm [String]: The term entered in the filter
      @arg rowSearchTerm [String]: The term for the given row/column value
      @returns Boolean: A boolean to indicate whether the term has been found in the row
      @default
        @@codeblock js
          function(term, rowSearchTerm) {
            var whitespaceSplitRegex = /\s+/
            var stripLeadingAndTrailingWhitespaceRegex = /^\s+|\s+$/g
            var arr = term.replace(stripLeadingAndTrailingWhitespaceRegex, '').split(whitespaceSplitRegex)
            var validPart = hx.find(arr, function(part) {
              return ~rowSearchTerm.indexOf(part)
            })
            return hx.defined(validPart)
          }
    @returns Function: The function for checking if a single row matches the filters
      @arg filters [Array[Array[Object]]]: The advanced search filters
      @arg row [Object]: The row object


@function hx.dataTable
  @added 1.0.0
    @description
      Fluid api version of DataTable

  @updated 1.1.0
    @issue 59
    @description
      Make the fluid api data table function render the table if a feed is
      provided

  @description
    Creates a new DataTable set up on a detached element, wrapped in a selection
  @arg options [Object]: See the options object for constructing DataTable
  @returns Selection: A selection containing an element with an DataTable initialised on it
