
@prototype hx.Tree
  @bugfix 0.11.0
    @description
      Fixed an issue where show/hide were not changing the rotation of the arrow icons in trees.

  @bugfix 0.14.0
    @description
      The options.items option has been fixed to not throw an error when used.

  @description
    Create one of these for each tree layout in your page. This object provides a way to fill out tree layouts from an array of objects, and also makes it possible to listen out for tree expansion and contraction events. It also makes it possible to expand / collapse parts of the tree using the api.

  @method render
    @deprecated 0.13.0
      @description
        Deprecated as part of API standardisation
        Use @code[items(data)] to set the data and @code[renderer(render)] to set the renderer or pass in options to the constructor.

    @removed 0.14.0
      @description
        Use @code[items(data)] to set the data and @code[renderer(render)] to set the renderer or pass in options to the constructor.

    @description
      Sets up a tree layout from a nested array of javascript objects.

    @arg data [Array[Object]]
      @description
        A nested array of objects that represent nodes in the tree.
        An array that takes the following form:
        @@codeblock js

        The data object should be an array of objects that represent the first level of nodes in the tree. Each of these nodes can contain children - they can have a 'children' field which refers to an array of the child nodes. A node can also contain other properties, which will contain the information you wish to fill the node out with. If the example above, the "name" and "color" fields are properties that we have chosen to give to each node, and might used when rendering each node.
        Note that other than the 'children' field, it is up to you what you call any other properties in each node.

    @arg renderer [Function]
      @description
        A function that turns object nodes to dom elements.
        An example renderer:
        @@codeblock javascript
          var renderer = function(element, datum) {
            element.innerHTML = datum.name
            element.style.color = datum.color || 'black'
          }

        This will set the text of each node to the property 'name' in the json data, and will set the color of the node to the 'color' property if it is present.
        Note that you can do anything here - you can append new elements to the element supplied and fill out the node with arbitrary blocks of html. This is the part where you define what the contents of each node is going to look like.

      @arg node [HTMLElement]
        @description
          The element to populate.

      @arg data [Any]
        @description
          The data to populate the element with.

  @constructor
    @deprecated 0.13.0
      @description
        Deprecated as part of API standardisation
        Use @code[hx.Tree(selector, options)] instead.

    @removed 0.14.0
      @description
        Use @code[hx.Tree(selector, options)] instead.

    @description
      Sets up / prepares a selection for displaying data in an expandable tree.

    @arg selection [String/HTMLElement/Selection]
      @description
        A unique css selector or a HTMLElement that identifies your tree.

    @arg? hideDisabledButtons [Boolean]
      @description
        A parameter that hides the 'disabled' buttons added to the tree.

      @default
        false

  @method show
    @description
      Shows all the nodes for the selected tree.

    @arg? animate [Boolean]
      @description
        Whether or not to animate the toggle when expanding the tree.
        @default
          true

    @returns [Tree]
      @description
        This Tree

  @method show
    @description
      Shows a specific tree node's children.

    @arg animate [Boolean]
      @description
        Whether or not to animate the toggle when showing the branch of the tree.

    @arg node [HTMLElement]
      @description
        Specifies a specific node to show. Must be passed a <span class="pill">hx-tree-node</span> node.
        If the node is hidden and part of a nested set of children, this function will traverse up the tree and make all required elements visible.

    @returns [Tree]
      @description
        This Tree

  @method hide
    @description
      Hides all the nodes for the selected tree.

    @arg? animate [Boolean]
      @description
        Whether or not to animate the toggle when hiding the tree.
        @default
          true

    @returns [Tree]
      @description
        This Tree

  @method hide
    @description
      Shows a specific tree node's children.

    @arg animate [Boolean]
      @description
        Whether or not to animate the toggle when hiding the branch of the tree.

    @arg node [HTMLElement]
      @description
        Specifies a node for which to hide the content. Must be passed a <span class="pill">hx-tree-node</span> node.

    @returns [Tree]
      @description
        This Tree

  @constructor
    @added 0.13.0
    @description
      Sets up / prepares a selection for displaying data in an expandable tree.

    @arg selector [String/HTMLElement/Selection]
      @description
        A unique css selector or a HTMLElement that identifies your tree.

    @arg? options [Object]
      @description
        The options to use when constructing the tree

      @property hideDisabledButtons [Boolean]
        @description
          A parameter that hides the 'disabled' buttons added to the tree.

        @default
          false

      @property animate [Boolean]
        @description
          A parameter that determines whether to animate the arrows when tree children are shown/hidden.

      @property renderer [Function]
        @description
          A function that turns object nodes to dom elements.
          An example renderer:
          @@codeblock javascript
            var renderer = function(element, datum) {
              element.innerHTML = datum.name
              element.style.color = datum.color || 'black'
            }

          This will set the text of each node to the property 'name' in the json data, and will set the color of the node to the 'color' property if it is present.
          Note that you can do anything here - you can append new elements to the element supplied and fill out the node with arbitrary blocks of html. This is the part where you define what the contents of each node is going to look like.

        @arg node [HTMLElement]
          @description
            The element to populate.

        @arg data [Any]
          @description
            The data to populate the element with.

      @property items [Array[Object]]
        @description
          A nested array of objects that represent nodes in the tree.
          An array that takes the following form:
          @@codeblock js

          The data object should be an array of objects that represent the first level of nodes in the tree. Each of these nodes can contain children - they can have a 'children' field which refers to an array of the child nodes. A node can also contain other properties, which will contain the information you wish to fill the node out with. If the example above, the "name" and "color" fields are properties that we have chosen to give to each node, and might used when rendering each node.
          Note that other than the 'children' field, it is up to you what you call any other properties in each node.

      @property lazy [Boolean]
        @added 1.8.0
          @issue 29
          @description
            Added an option for lazily rendering tree nodes when building from JSON

        @description
          Whether to lazily render the tree nodes when building from JSON.

          When this is true, the children of a tree node will only be renderered when their parent is opened.

        @default
          false

  @method items
    @added 0.13.0
    @description
      Gets the items the tree is built from

    @returns [Array[Object]]
      @description
        The tree items

  @method items
    @added 0.13.0
    @description
      Set the items to build the tree from.

    @arg data [Array[Object]]
      @description
        A nested array of objects that represent nodes in the tree.

        An array that takes the following form:

        @@codeblock js

        The data object should be an array of objects that represent the first level of nodes in the tree. Each of these nodes can contain children - they can have a 'children' field which refers to an array of the child nodes. A node can also contain other properties, which will contain the information you wish to fill the node out with. If the example above, the "name" and "color" fields are properties that we have chosen to give to each node, and might used when rendering each node.

        Note that other than the 'children' field, it is up to you what you call any other properties in each node.

    @returns [Tree]
      @description
        This Tree

  @method renderer
    @added 0.13.0
    @description
      Gets the function used to convert tree items into DOM elements.

    @returns [Function]
      @description
        The current renderer function

      @arg node [HTMLElement]
        @description
          The element to populate.

      @arg data [Object]
        @description
          The data to populate the element with.

  @method renderer
    @added 0.13.0
    @description
      Sets the function used to convert tree items into DOM elements.

    @arg render [Function]
      @description
        A function that turns object nodes to dom elements.

        An example renderer:

        @@codeblock javascript
          var renderer = function(element, datum) {
            element.innerHTML = datum.name
            element.style.color = datum.color || 'black'
          }

        This will set the text of each node to the property 'name' in the json data, and will set the color of the node to the 'color' property if it is present.

        Note that you can do anything here - you can append new elements to the element supplied and fill out the node with arbitrary blocks of html. This is the part where you define what the contents of each node is going to look like.

      @arg node [HTMLElement]
        @description
          The element to populate.

      @arg data [Object]
        @description
          The data to populate the element with.

    @returns [Tree]
      @description
        This Tree

@function hx.initialiseTrees
  @deprecated 0.13.0
    @description
      Use @code[hx.initializeTrees] instead.

  @removed 0.14.0
    @description
      Use @code[hx.initializeTrees] instead.

  @description
    Initialises all the trees that match a css selector in a page and returns the Tree objects as an array.

  @arg selector [String]
    @description
      A css selector that selects the tab groups you wish to initialise.

@class hx-tree
  @updated 0.10.0
    @description
      Removed module-specific classes in favor of generic classes

  @description
    The class to give to tree elements. When building trees using the @code[items] method, these classes will be added to content automatically.

  @class hx-tree-node
    @description
      The class to give to tree nodes. These should be directly inside @code[hx-tree] or @code[hx-tree-node-children] elements.

    @class hx-tree-node-parent
      @description
        The class to give to the parent element for a tree. This should always be placed directly inside a @code[hx-tree-node] and before a @code[hx-tree-node-children] element.

      @class hx-tree-node-content
        @description
          The content for the parent element. Should always be placed directly inside a @code[hx-tree-node-parent] element.

    @class hx-tree-node-children
      @description
        The class to give to the children element for a tree. This should always be placed directly inside a @code[hx-tree-node] and after a @code[hx-tree-node-parent] element.

    @class hx-tree-node-content
      @description
        The class to give to any content within a tree node, should be placed directly inside a @code[hx-tree-node] that doesn't include @code[hx-tree-node-parent] or @code[hx-tree-node-children] .

  @extraClass [hx-tree-[n]]
    @deprecated 0.9.0
      @description
        All numbered color classes will be removed in a later version.Use the context classes instead.

    @removed 0.10.0
    @description
      Numbered classes for coloring the tree icons.

@function hx.initializeTrees
  @added 0.13.0
  @description
    Initializes all the trees that match a css selector in a page and returns the Tree objects as an array.

  @arg selector [String]
    @description
      A css selector that selects the tab groups you wish to initialise.

@function hx.tree
  @added 1.0.0
    @description
      Fluid api version of Tree

  @description
    Creates a new Tree set up on a detached element, wrapped in a selection

  @arg? options [Object]
    @description
      See the options object for constructing Tree

  @returns [Selection]
    @description
      A selection containing an element with an Tree initialised on it

